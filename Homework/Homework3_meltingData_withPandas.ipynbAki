{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br>\n",
    "\n",
    "<img src=\"https://raw.githubusercontent.com/SmilodonCub/DS4VS/master/Homework/melt.png\" width=\"100%\" style=\"margin-left:auto; margin-right:auto\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "# Homework3: `pandas` DataFrame manipulations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: `pandas` Melting and Pivoting\n",
    "\n",
    "In this first section we will melt and pivot a pandas dataframe. A smart combination of manipulating and aggregating the dataframe will help us extract different insights without having to write messy for loops. We will use a simple toy dataset to illustrate each data restructuring method.  \n",
    "\n",
    "First, let's define a few terms:  \n",
    "\n",
    "* **Aggregating** - Condensing the data by grouping like observations and producing summary metrics to characterize the new grouping. Aggregated data will typically have a smaller sized dataframe as a result.\n",
    "* **Wide Data** - each row holds more than one observations for a given value of index feature(s)\n",
    "* **Long Data** - each row holds one observation \n",
    "* **Melting** - Restructuring the data from a 'wide' to a 'long' format. The data is reshaped so that each row holds only one observation for a particular category. Also called 'pivoting long'.\n",
    "* **Pivoting** - Restructuring the data from a 'long' to a 'wide' format. The data is reshape typically into categorical columns. Also called 'pivoting wide'.\n",
    "\n",
    "Now to import the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's set up with these libraries handy\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4, 7)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Carrier</th>\n",
       "      <th>Status</th>\n",
       "      <th>LAX</th>\n",
       "      <th>PHX</th>\n",
       "      <th>SAN</th>\n",
       "      <th>SFO</th>\n",
       "      <th>SEA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>497</td>\n",
       "      <td>221</td>\n",
       "      <td>212</td>\n",
       "      <td>503</td>\n",
       "      <td>1841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>62</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>102</td>\n",
       "      <td>305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>694</td>\n",
       "      <td>4840</td>\n",
       "      <td>383</td>\n",
       "      <td>320</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>117</td>\n",
       "      <td>415</td>\n",
       "      <td>65</td>\n",
       "      <td>129</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Carrier   Status  LAX   PHX  SAN  SFO   SEA\n",
       "0   ALASKA  on time  497   221  212  503  1841\n",
       "1   ALASKA  delayed   62    12   20  102   305\n",
       "2  AM West  on time  694  4840  383  320   201\n",
       "3  AM West  delayed  117   415   65  129    61"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing our tiny toy data set as a pandas dataframe\n",
    "url = 'https://raw.githubusercontent.com/SmilodonCub/DS4VS/master/Homework/flights.csv'\n",
    "col_names = ['Carrier', 'Status', 'LAX', 'PHX', 'SAN', 'SFO', 'SEA']\n",
    "flights = pd.read_csv( url, encoding= 'unicode_escape' )\n",
    "flights.columns = col_names\n",
    "flights = flights.ffill() #will fill in missing values (default along column axis)\n",
    "\n",
    "print( flights.shape )\n",
    "flights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Morphing Shapes...\n",
    "\n",
    "Currently, the `flights` dataframe is organized in a wide format. Observe how each row holds multiple observations for a single condition. For example, `flights.iloc[0]` holds observations summarizing the number of 'on time' 'ALASKA' flights for 'LAX', 'PHX', 'SAN', 'SFO' and 'SEA'.  \n",
    "\n",
    "For such a small dataset, this format makes for a very easy to understand summary of the data to human eyes, but it it is not very convenient for analysis. For example, what if we would like to compare the proportion of flights that are on-time vs delayed for each airport and carrier. This would be complicated with the wide format!  \n",
    "\n",
    "Let's melt the dataframe into the long format:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Carrier</th>\n",
       "      <th>Status</th>\n",
       "      <th>Airport</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>LAX</td>\n",
       "      <td>497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>LAX</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>LAX</td>\n",
       "      <td>694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>LAX</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>PHX</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>PHX</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>PHX</td>\n",
       "      <td>4840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>PHX</td>\n",
       "      <td>415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>SAN</td>\n",
       "      <td>212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SAN</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>SAN</td>\n",
       "      <td>383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SAN</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>SFO</td>\n",
       "      <td>503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SFO</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>SFO</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SFO</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>on time</td>\n",
       "      <td>SEA</td>\n",
       "      <td>1841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SEA</td>\n",
       "      <td>305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>AM West</td>\n",
       "      <td>on time</td>\n",
       "      <td>SEA</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>AM West</td>\n",
       "      <td>delayed</td>\n",
       "      <td>SEA</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Carrier   Status Airport  Total\n",
       "0    ALASKA  on time     LAX    497\n",
       "1    ALASKA  delayed     LAX     62\n",
       "2   AM West  on time     LAX    694\n",
       "3   AM West  delayed     LAX    117\n",
       "4    ALASKA  on time     PHX    221\n",
       "5    ALASKA  delayed     PHX     12\n",
       "6   AM West  on time     PHX   4840\n",
       "7   AM West  delayed     PHX    415\n",
       "8    ALASKA  on time     SAN    212\n",
       "9    ALASKA  delayed     SAN     20\n",
       "10  AM West  on time     SAN    383\n",
       "11  AM West  delayed     SAN     65\n",
       "12   ALASKA  on time     SFO    503\n",
       "13   ALASKA  delayed     SFO    102\n",
       "14  AM West  on time     SFO    320\n",
       "15  AM West  delayed     SFO    129\n",
       "16   ALASKA  on time     SEA   1841\n",
       "17   ALASKA  delayed     SEA    305\n",
       "18  AM West  on time     SEA    201\n",
       "19  AM West  delayed     SEA     61"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use the pd.melt() method to selectively melt the airport columns \n",
    "# while keeping the Carrier & Status as index columns\n",
    "\n",
    "flights_long = pd.melt( flights, id_vars = ['Carrier', 'Status'], \n",
    "                       value_vars = ['LAX', 'PHX', 'SAN', 'SFO', 'SEA'], \n",
    "                       var_name = 'Airport', \n",
    "                       value_name='Total' )\n",
    "\n",
    "flights_long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Airport          LAX   PHX  SAN   SEA  SFO\n",
      "Carrier Status                            \n",
      "ALASKA  delayed   62    12   20   305  102\n",
      "        on time  497   221  212  1841  503\n",
      "AM West delayed  117   415   65    61  129\n",
      "        on time  694  4840  383   201  320\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "MultiIndex([( 'ALASKA', 'delayed'),\n",
       "            ( 'ALASKA', 'on time'),\n",
       "            ('AM West', 'delayed'),\n",
       "            ('AM West', 'on time')],\n",
       "           names=['Carrier', 'Status'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=flights_long.pivot_table(index=['Carrier','Status'],columns=['Airport'],values='Total')\n",
    "print(a)\n",
    "a.index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "Great! we now have a looong flights dataframe.  \n",
    "But, let's say we are interested in calculating the percent of on-time/delayed flights for each Carrier/Status condition. That would be hard to compute from this configuration of the dataframe. We'd have to work hard to find the total for each Carrier/Status by looping alternate rows and we'd need to create a new data structure to hold the results...sounds messy & unnecessary because it is. Let's just restructure the data in a way that gives us the 'on-time' and 'delayed' observations as new feature columns by pivoting the dataframe.  \n",
    "\n",
    "We will now pivot flights_long with 'Carrier' and 'Airport' serving as our index columns while we widen the total into new columns for 'on-time' and 'delayed':  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Status</th>\n",
       "      <th>delayed</th>\n",
       "      <th>on time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrier</th>\n",
       "      <th>Airport</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ALASKA</th>\n",
       "      <th>LAX</th>\n",
       "      <td>62</td>\n",
       "      <td>497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PHX</th>\n",
       "      <td>12</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SAN</th>\n",
       "      <td>20</td>\n",
       "      <td>212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEA</th>\n",
       "      <td>305</td>\n",
       "      <td>1841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFO</th>\n",
       "      <td>102</td>\n",
       "      <td>503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">AM West</th>\n",
       "      <th>LAX</th>\n",
       "      <td>117</td>\n",
       "      <td>694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PHX</th>\n",
       "      <td>415</td>\n",
       "      <td>4840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SAN</th>\n",
       "      <td>65</td>\n",
       "      <td>383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEA</th>\n",
       "      <td>61</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFO</th>\n",
       "      <td>129</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status           delayed  on time\n",
       "Carrier Airport                  \n",
       "ALASKA  LAX           62      497\n",
       "        PHX           12      221\n",
       "        SAN           20      212\n",
       "        SEA          305     1841\n",
       "        SFO          102      503\n",
       "AM West LAX          117      694\n",
       "        PHX          415     4840\n",
       "        SAN           65      383\n",
       "        SEA           61      201\n",
       "        SFO          129      320"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_status = flights_long.pivot_table(index = ['Carrier','Airport'],columns = 'Status', values = 'Total')\n",
    "flights_status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Airport</th>\n",
       "      <th>LAX</th>\n",
       "      <th>PHX</th>\n",
       "      <th>SAN</th>\n",
       "      <th>SEA</th>\n",
       "      <th>SFO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ALASKA</th>\n",
       "      <td>62</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>305</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>117</td>\n",
       "      <td>415</td>\n",
       "      <td>65</td>\n",
       "      <td>61</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Airport  LAX  PHX  SAN  SEA  SFO\n",
       "Carrier                         \n",
       "ALASKA    62   12   20  305  102\n",
       "AM West  117  415   65   61  129"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_status.pivot_table(index=['Carrier'],columns='Airport',values='delayed')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "The data is now somewhere inbetween long and wide, but just where we need it for our purposes.  \n",
    "Now we can easily find the total flights by taking the sum of the 'delayed' + 'on-time' columns. It is also easy to then calculate the percentage for each observation...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>Carrier</th>\n",
       "      <th>Airport</th>\n",
       "      <th>delayed</th>\n",
       "      <th>on time</th>\n",
       "      <th>Total</th>\n",
       "      <th>p_delayed</th>\n",
       "      <th>p_ontime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>LAX</td>\n",
       "      <td>62</td>\n",
       "      <td>497</td>\n",
       "      <td>559</td>\n",
       "      <td>11.09</td>\n",
       "      <td>88.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>PHX</td>\n",
       "      <td>12</td>\n",
       "      <td>221</td>\n",
       "      <td>233</td>\n",
       "      <td>5.15</td>\n",
       "      <td>94.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SAN</td>\n",
       "      <td>20</td>\n",
       "      <td>212</td>\n",
       "      <td>232</td>\n",
       "      <td>8.62</td>\n",
       "      <td>91.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SEA</td>\n",
       "      <td>305</td>\n",
       "      <td>1841</td>\n",
       "      <td>2146</td>\n",
       "      <td>14.21</td>\n",
       "      <td>85.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SFO</td>\n",
       "      <td>102</td>\n",
       "      <td>503</td>\n",
       "      <td>605</td>\n",
       "      <td>16.86</td>\n",
       "      <td>83.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AM West</td>\n",
       "      <td>LAX</td>\n",
       "      <td>117</td>\n",
       "      <td>694</td>\n",
       "      <td>811</td>\n",
       "      <td>14.43</td>\n",
       "      <td>85.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AM West</td>\n",
       "      <td>PHX</td>\n",
       "      <td>415</td>\n",
       "      <td>4840</td>\n",
       "      <td>5255</td>\n",
       "      <td>7.90</td>\n",
       "      <td>92.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SAN</td>\n",
       "      <td>65</td>\n",
       "      <td>383</td>\n",
       "      <td>448</td>\n",
       "      <td>14.51</td>\n",
       "      <td>85.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SEA</td>\n",
       "      <td>61</td>\n",
       "      <td>201</td>\n",
       "      <td>262</td>\n",
       "      <td>23.28</td>\n",
       "      <td>76.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SFO</td>\n",
       "      <td>129</td>\n",
       "      <td>320</td>\n",
       "      <td>449</td>\n",
       "      <td>28.73</td>\n",
       "      <td>71.27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status  Carrier Airport  delayed  on time  Total  p_delayed  p_ontime\n",
       "0        ALASKA     LAX       62      497    559      11.09     88.91\n",
       "1        ALASKA     PHX       12      221    233       5.15     94.85\n",
       "2        ALASKA     SAN       20      212    232       8.62     91.38\n",
       "3        ALASKA     SEA      305     1841   2146      14.21     85.79\n",
       "4        ALASKA     SFO      102      503    605      16.86     83.14\n",
       "5       AM West     LAX      117      694    811      14.43     85.57\n",
       "6       AM West     PHX      415     4840   5255       7.90     92.10\n",
       "7       AM West     SAN       65      383    448      14.51     85.49\n",
       "8       AM West     SEA       61      201    262      23.28     76.72\n",
       "9       AM West     SFO      129      320    449      28.73     71.27"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_status['Total'] = flights_status['delayed'] + flights_status['on time']\n",
    "flights_status['p_delayed'] = flights_status['delayed']/flights_status['Total']*100\n",
    "flights_status['p_ontime'] = flights_status['on time']/flights_status['Total']*100\n",
    "flights_status = flights_status.round( 2 )\n",
    "flights_status = flights_status.reset_index()\n",
    "flights_status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "We can do a quick visualization of the data..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 439.125x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualize the percentage of delayed flights for the airlines for each destination\n",
    "fig = sns.catplot( data = flights_status,\n",
    "                  kind = 'bar',\n",
    "                  x = 'Airport',\n",
    "                  y = 'p_delayed',\n",
    "                  hue = 'Carrier'\n",
    "                 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "From the figure above we can see that AM West flights are more likely to be delayed at all given airports. \n",
    "\n",
    "Next we would like to answer a different question about the data: What are the total number of 'delayed' and 'on time' flights for each airline? This will require aggregating our data into groups for each airline: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>delayed</th>\n",
       "      <th>on time</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ALASKA</th>\n",
       "      <td>501</td>\n",
       "      <td>3274</td>\n",
       "      <td>3775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>787</td>\n",
       "      <td>6438</td>\n",
       "      <td>7225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status   delayed  on time  Total\n",
       "Carrier                         \n",
       "ALASKA       501     3274   3775\n",
       "AM West      787     6438   7225"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# aggregate the data to find the total number of flights for each airline\n",
    "#    1) group on the column 'Carrier'\n",
    "#    2) take the sum of the numeric columns\n",
    "#    3) drop the 'p_' columns because they don't make sense as a summed value\n",
    "flights_status.groupby( 'Carrier' ).sum( ).drop( columns=['p_delayed', 'p_ontime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>Carrier</th>\n",
       "      <th>Airport</th>\n",
       "      <th>delayed</th>\n",
       "      <th>on time</th>\n",
       "      <th>Total</th>\n",
       "      <th>p_delayed</th>\n",
       "      <th>p_ontime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>LAX</td>\n",
       "      <td>62</td>\n",
       "      <td>497</td>\n",
       "      <td>559</td>\n",
       "      <td>11.09</td>\n",
       "      <td>88.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>PHX</td>\n",
       "      <td>12</td>\n",
       "      <td>221</td>\n",
       "      <td>233</td>\n",
       "      <td>5.15</td>\n",
       "      <td>94.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SAN</td>\n",
       "      <td>20</td>\n",
       "      <td>212</td>\n",
       "      <td>232</td>\n",
       "      <td>8.62</td>\n",
       "      <td>91.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SEA</td>\n",
       "      <td>305</td>\n",
       "      <td>1841</td>\n",
       "      <td>2146</td>\n",
       "      <td>14.21</td>\n",
       "      <td>85.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ALASKA</td>\n",
       "      <td>SFO</td>\n",
       "      <td>102</td>\n",
       "      <td>503</td>\n",
       "      <td>605</td>\n",
       "      <td>16.86</td>\n",
       "      <td>83.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AM West</td>\n",
       "      <td>LAX</td>\n",
       "      <td>117</td>\n",
       "      <td>694</td>\n",
       "      <td>811</td>\n",
       "      <td>14.43</td>\n",
       "      <td>85.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AM West</td>\n",
       "      <td>PHX</td>\n",
       "      <td>415</td>\n",
       "      <td>4840</td>\n",
       "      <td>5255</td>\n",
       "      <td>7.90</td>\n",
       "      <td>92.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SAN</td>\n",
       "      <td>65</td>\n",
       "      <td>383</td>\n",
       "      <td>448</td>\n",
       "      <td>14.51</td>\n",
       "      <td>85.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SEA</td>\n",
       "      <td>61</td>\n",
       "      <td>201</td>\n",
       "      <td>262</td>\n",
       "      <td>23.28</td>\n",
       "      <td>76.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AM West</td>\n",
       "      <td>SFO</td>\n",
       "      <td>129</td>\n",
       "      <td>320</td>\n",
       "      <td>449</td>\n",
       "      <td>28.73</td>\n",
       "      <td>71.27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status  Carrier Airport  delayed  on time  Total  p_delayed  p_ontime\n",
       "0        ALASKA     LAX       62      497    559      11.09     88.91\n",
       "1        ALASKA     PHX       12      221    233       5.15     94.85\n",
       "2        ALASKA     SAN       20      212    232       8.62     91.38\n",
       "3        ALASKA     SEA      305     1841   2146      14.21     85.79\n",
       "4        ALASKA     SFO      102      503    605      16.86     83.14\n",
       "5       AM West     LAX      117      694    811      14.43     85.57\n",
       "6       AM West     PHX      415     4840   5255       7.90     92.10\n",
       "7       AM West     SAN       65      383    448      14.51     85.49\n",
       "8       AM West     SEA       61      201    262      23.28     76.72\n",
       "9       AM West     SFO      129      320    449      28.73     71.27"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "### Now you try!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 1** Using the `flights_status` dataframe, aggregate the data to get the total flights grouped by 'Airport'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airport</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LAX</th>\n",
       "      <td>1370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PHX</th>\n",
       "      <td>5488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SAN</th>\n",
       "      <td>680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEA</th>\n",
       "      <td>2408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFO</th>\n",
       "      <td>1054</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status   Total\n",
       "Airport       \n",
       "LAX       1370\n",
       "PHX       5488\n",
       "SAN        680\n",
       "SEA       2408\n",
       "SFO       1054"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_status.groupby('Airport').sum().drop(columns=['delayed','on time','p_delayed', 'p_ontime'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 2** The original format of the dataframe was very friendly to human eyes, but the values are difficult to draw insights from. Can you reshape the `flights_status` dataframe back to the original (4, 7) using the new percentage values you computed above?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Airport</th>\n",
       "      <th>LAX</th>\n",
       "      <th>PHX</th>\n",
       "      <th>SAN</th>\n",
       "      <th>SEA</th>\n",
       "      <th>SFO</th>\n",
       "      <th>Status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ALASKA</th>\n",
       "      <td>11.09</td>\n",
       "      <td>5.15</td>\n",
       "      <td>8.62</td>\n",
       "      <td>14.21</td>\n",
       "      <td>16.86</td>\n",
       "      <td>delay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>14.43</td>\n",
       "      <td>7.90</td>\n",
       "      <td>14.51</td>\n",
       "      <td>23.28</td>\n",
       "      <td>28.73</td>\n",
       "      <td>delay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALASKA</th>\n",
       "      <td>88.91</td>\n",
       "      <td>94.85</td>\n",
       "      <td>91.38</td>\n",
       "      <td>85.79</td>\n",
       "      <td>83.14</td>\n",
       "      <td>on time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>85.57</td>\n",
       "      <td>92.10</td>\n",
       "      <td>85.49</td>\n",
       "      <td>76.72</td>\n",
       "      <td>71.27</td>\n",
       "      <td>on time</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Airport    LAX    PHX    SAN    SEA    SFO   Status\n",
       "Carrier                                            \n",
       "ALASKA   11.09   5.15   8.62  14.21  16.86    delay\n",
       "AM West  14.43   7.90  14.51  23.28  28.73    delay\n",
       "ALASKA   88.91  94.85  91.38  85.79  83.14  on time\n",
       "AM West  85.57  92.10  85.49  76.72  71.27  on time"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_p_delay=flights_status.pivot_table(index='Carrier',columns=['Airport'],values='p_delayed')\n",
    "flights_p_delay['Status']='delay'\n",
    "flights_p_ontime=flights_status.pivot_table(index='Carrier',columns=['Airport'],values='p_ontime')\n",
    "flights_p_ontime['Status']='on time'\n",
    "flights_status_new=pd.concat([flights_p_delay,flights_p_ontime])\n",
    "flights_status_new"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 3** This figure above plots the percentage of delayed flights per destination for each carrier. We can think of these plotted values as the conditional probability, $\\mbox{P}_{\\mbox{Airport}}(\\mbox{delayed}|\\mbox{ALASKA})$. What if we are really interested in a different question: For a given 'Airport', what is the propability of flights for a given 'Carrier'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Carrier</th>\n",
       "      <th>ALASKA</th>\n",
       "      <th>AM West</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airport</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LAX</th>\n",
       "      <td>559</td>\n",
       "      <td>811</td>\n",
       "      <td>1370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PHX</th>\n",
       "      <td>233</td>\n",
       "      <td>5255</td>\n",
       "      <td>5488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SAN</th>\n",
       "      <td>232</td>\n",
       "      <td>448</td>\n",
       "      <td>680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEA</th>\n",
       "      <td>2146</td>\n",
       "      <td>262</td>\n",
       "      <td>2408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFO</th>\n",
       "      <td>605</td>\n",
       "      <td>449</td>\n",
       "      <td>1054</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Carrier  ALASKA  AM West  Total\n",
       "Airport                        \n",
       "LAX         559      811   1370\n",
       "PHX         233     5255   5488\n",
       "SAN         232      448    680\n",
       "SEA        2146      262   2408\n",
       "SFO         605      449   1054"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I interpreted the question as \"What is the probability of a certain carrier, given a certain airport\"\n",
    "flights_by_airport=flights_long.groupby(['Airport','Carrier']).sum()\n",
    "flights_by_airport=flights_by_airport.pivot_table(index='Airport',columns='Carrier',values='Total')\n",
    "flights_by_airport['Total']=flights_by_airport['ALASKA']+flights_by_airport['AM West']\n",
    "flights_by_airport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Carrier</th>\n",
       "      <th>P_ALASKA</th>\n",
       "      <th>P_AM West</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airport</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LAX</th>\n",
       "      <td>40.802920</td>\n",
       "      <td>59.197080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PHX</th>\n",
       "      <td>4.245627</td>\n",
       "      <td>95.754373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SAN</th>\n",
       "      <td>34.117647</td>\n",
       "      <td>65.882353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SEA</th>\n",
       "      <td>89.119601</td>\n",
       "      <td>10.880399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFO</th>\n",
       "      <td>57.400380</td>\n",
       "      <td>42.599620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Carrier   P_ALASKA  P_AM West\n",
       "Airport                      \n",
       "LAX      40.802920  59.197080\n",
       "PHX       4.245627  95.754373\n",
       "SAN      34.117647  65.882353\n",
       "SEA      89.119601  10.880399\n",
       "SFO      57.400380  42.599620"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now I need to sum at each airport and devide each of them by the total to get probability \n",
    "flights_by_airport['P_ALASKA']=flights_by_airport['ALASKA']/flights_by_airport['Total']*100\n",
    "flights_by_airport['P_AM West']=flights_by_airport['AM West']/flights_by_airport['Total']*100\n",
    "flights_by_airport.drop(columns=['ALASKA','AM West','Total'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Optional** We had already calculated the conditional probability (what is the probability that a flight is delayed given it is ALASKA|AM WEST). Question 3 finds the prior (what is the probabilty a flight to an Airport is ALASKA|AM WEST. Can you invert the conditional probability, $\\mbox{P}_{\\mbox{Airport}}(\\mbox{ALASKA}|\\mbox{delayed})$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALASKA</th>\n",
       "      <th>AM West</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>delayed</th>\n",
       "      <td>501</td>\n",
       "      <td>787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>on time</th>\n",
       "      <td>3274</td>\n",
       "      <td>6438</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ALASKA  AM West\n",
       "delayed     501      787\n",
       "on time    3274     6438"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We haven't computed P(status|Carrier) yet. We only have computed P(status|Carrier,Airport)\n",
    "# First, I compute P(status|Carrier) and denote as p_sta_car\n",
    "# aggregate over carrier and status (since we dont need the infor for the airport for this)\n",
    "flights_sta_car=flights_long.groupby(['Carrier','Status'])['Total'].sum().reset_index()\n",
    "# Make a table that is easy to see\n",
    "flights_sta_car=flights_sta_car=flights_sta_car.pivot_table(index='Status',columns='Carrier')\n",
    "flights_sta_car=flights_sta_car.set_axis(['ALASKA','AM West'],axis=1)\n",
    "flights_sta_car=flights_sta_car.set_axis(['delayed','on time'],axis=0)\n",
    "flights_sta_car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALASKA</th>\n",
       "      <th>AM West</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>delayed</th>\n",
       "      <td>0.132715</td>\n",
       "      <td>0.108927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>on time</th>\n",
       "      <td>0.867285</td>\n",
       "      <td>0.891073</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ALASKA   AM West\n",
       "delayed  0.132715  0.108927\n",
       "on time  0.867285  0.891073"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I will compute the conditional probability of status given carrier\n",
    "p_sta_car=flights_sta_car/flights_sta_car.sum()\n",
    "p_sta_car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>delayed</th>\n",
       "      <th>on time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ALASKA</th>\n",
       "      <td>0.388975</td>\n",
       "      <td>0.337109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>0.611025</td>\n",
       "      <td>0.662891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          delayed   on time\n",
       "ALASKA   0.388975  0.337109\n",
       "AM West  0.611025  0.662891"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I can also compute the conditional probability of the flight from certain carrier given the status (denote as p_car_sta)\n",
    "flights_car_sta=flights_sta_car.T\n",
    "p_car_sta=flights_car_sta/flights_car_sta.sum()\n",
    "p_car_sta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Status</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>delayed</th>\n",
       "      <td>0.117091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>on time</th>\n",
       "      <td>0.882909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Total\n",
       "Status           \n",
       "delayed  0.117091\n",
       "on time  0.882909"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#P(Carrier)=sum P(Carrier|Status)*P(Status) (over status)\n",
    "# We also need to know P(Status) which is probability of the flight being delayed/on time (regardless of all the carriers and destinations)\n",
    "# which is not available. So, I assume that probability of the status(delay or on time) based on this data\n",
    "# will reflect overall probability of the status\n",
    "flights_sta=flights_long.groupby('Status').sum()\n",
    "p_status=flights_sta/flights_sta.sum()\n",
    "p_status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALASKA</th>\n",
       "      <th>AM West</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>0.343182</td>\n",
       "      <td>0.656818</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ALASKA   AM West\n",
       "Total  0.343182  0.656818"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_alaska=p_car_sta['delayed'].loc['ALASKA']*p_status.loc['delayed']+p_car_sta['on time'].loc['ALASKA']*p_status.loc['on time']\n",
    "p_AMWest=p_car_sta['delayed'].loc['AM West']*p_status.loc['delayed']+p_car_sta['on time'].loc['AM West']*p_status.loc['on time']\n",
    "p_carrier=pd.DataFrame({'ALASKA':p_alaska,'AM West':p_AMWest})\n",
    "p_carrier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Working with your own data\n",
    "\n",
    "Think back to Homework #2. Use the code we developed there as a framework to wrangle some data of your own into a pandas dataframe. **Bonus**: can you find an application for one of the dataframe manipulations reviewed in this homework assignment (aggregating, melting, pivoting)  \n",
    "\n",
    "<br><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert mat file to dataframe\n",
    "import numpy as np\n",
    "import scipy.io as spio\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def Ex_rolling(obnum):\n",
    "    lib = spio.loadmat(f'/Volumes/GoogleDrive/My Drive/Akihito/Experiment_R_S_W/Results/ExRWSRigidObserver{obnum}.mat')\n",
    "    result=lib['Stim_new']\n",
    "    result_dic={'Stim_type': np.array([ii[0][0][:] for ii in result[0][0][1][:]]).reshape((540,)),'Size':result[0][0][2][:].reshape((540,)),'Speed':result[0][0][3][:].reshape((540,)),\n",
    "                'Question':np.array([ii[0][0][:] for ii in result[0][0][4][:]]).reshape((540,)),\n",
    "                'Response':result[0][0][5][:].reshape((540,))}\n",
    "    \n",
    "    questions=['Are the rings wobbling around each other without a fixed connection? (No: 4, Yes:6)','Are they rolling around each other? (No: 4, Yes:6)',\n",
    "               'Are the rings rotating together while connected? (No: 4, Yes:6)'];\n",
    "    for ii,xx in enumerate(result_dic['Question']):\n",
    "        if xx==questions[0]:\n",
    "            result_dic['Question'][ii]='Wobbling'\n",
    "        elif xx==questions[1]:\n",
    "            result_dic['Question'][ii]='Rolling'\n",
    "        else:\n",
    "            result_dic['Question'][ii]='Rotating'\n",
    "    Size=['3 deg','6 deg'];\n",
    "    Speed=['0.6 deg/sec','6.0 deg/sec','60.0 deg/sec'];\n",
    "    result_dic['Size']=[Size[int(result_dic['Size'][ii])] for ii in range(540) ]\n",
    "    result_dic['Speed']=[Speed[int(result_dic['Speed'][ii])] for ii in range(540) ]\n",
    "    result_pd=pd.DataFrame(result_dic,index=np.arange(0,540,step=1))\n",
    "\n",
    "    \n",
    "    result_pd['Observer']=obnum\n",
    "    return result_pd\n",
    "\n",
    "# Convert data\n",
    "def Ex_rigid_non_rigid(obnum):\n",
    "    row_data = spio.loadmat(f'/Users/akihitomaruya/Desktop/Project/Project2021/Tire/Viewpixx3/Results/Ex3RigidOrNonRigidObserver{obnum}.mat')\n",
    "    Results=row_data['Results']\n",
    "    #% Results are (600,8), where each row corresponds to one trial and the columns are\n",
    "    #[Response Size Speed stim_num response_time condition_num start_frame clock_wise_or_counter]\n",
    "    \n",
    "    # Assign the name of stimuli to the stimulus number \n",
    "    stim=['Circ ring','Circ w gap','Circ w paint','Oct on edge','Oct on vertex',\n",
    "          'Circ wobble','Circ w gap wobble','Circ w paint wobble',\n",
    "          'Oct on edge wobble','Oct on vertex wobble',\n",
    "          'Rect on vertex','Rect on edge','Long ellipse','Wide ellipse'];\n",
    "    \n",
    "    Size=['3 deg','6 deg'];\n",
    "    \n",
    "    Speed=['0.6 deg/sec','6.0 deg/sec','60.0 deg/sec'];\n",
    "    \n",
    "    # Assign column name\n",
    "    Key_name=['Response','Size','Speed','Type','Response time','Condition number','Start frame','Counter clockwise rotation']\n",
    "    # Put them in dictionary \n",
    "    Results_dic={xx : Results[:,[ii]].reshape(len(Results),) for ii,xx in enumerate(Key_name)}\n",
    "    Results_dic['Size']=[Size[int(Results_dic['Size'][ii])] for ii in range(len(Results)) ]\n",
    "    Results_dic['Speed']=[Speed[int(Results_dic['Speed'][ii])] for ii in range(len(Results)) ]\n",
    "    Results_dic['Type']=[stim[int(Results_dic['Type'][ii])-1] for ii in range(len(Results)) ]\n",
    "    results_pd=pd.DataFrame(Results_dic,index=(np.arange(0,len(Results),step=1)))\n",
    "    results_pd['Observer']=obnum\n",
    "    return results_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Response</th>\n",
       "      <th>Size</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Response time</th>\n",
       "      <th>Condition number</th>\n",
       "      <th>Start frame</th>\n",
       "      <th>Counter clockwise rotation</th>\n",
       "      <th>Observer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>1.362</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.397222</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.893</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.347222</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>2.712</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.138889</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>10.924</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.383333</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3.654</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.177778</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Response   Size         Speed           Type  Response time  \\\n",
       "0       0.0  6 deg   6.0 deg/sec     Circ w gap          1.362   \n",
       "1       0.0  3 deg   6.0 deg/sec  Oct on vertex          0.893   \n",
       "2       0.0  3 deg   0.6 deg/sec   Wide ellipse          2.712   \n",
       "3       0.0  3 deg  60.0 deg/sec   Rect on edge         10.924   \n",
       "4       0.0  6 deg  60.0 deg/sec   Rect on edge          3.654   \n",
       "\n",
       "   Condition number  Start frame  Counter clockwise rotation  Observer  \n",
       "0               1.0     0.397222                        -1.0         1  \n",
       "1               1.0     0.347222                        -1.0         1  \n",
       "2               1.0     0.138889                         1.0         1  \n",
       "3               1.0     0.383333                        -1.0         1  \n",
       "4               1.0     0.177778                         1.0         1  "
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%% Ex1 Rigid and non-rigid experiment\n",
    "\n",
    "result_all=[Ex_rigid_non_rigid(obnum+1) for obnum in range(10)]\n",
    "Result_all=pd.concat(result_all)\n",
    "Result_all.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Stim_type</th>\n",
       "      <th>Size</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Question</th>\n",
       "      <th>Response</th>\n",
       "      <th>Observer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SW</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Wobbling</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NR</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Wobbling</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NW</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Wobbling</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SS</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Wobbling</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SW</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Wobbling</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Stim_type   Size         Speed  Question  Response  Observer\n",
       "0        SW  6 deg  60.0 deg/sec  Wobbling         1         1\n",
       "1        NR  6 deg  60.0 deg/sec  Wobbling         1         1\n",
       "2        NW  6 deg  60.0 deg/sec  Wobbling         1         1\n",
       "3        SS  3 deg   6.0 deg/sec  Wobbling         0         1\n",
       "4        SW  6 deg   0.6 deg/sec  Wobbling         1         1"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%% Ex2 Rotation, wobbling, and rolling experiment\n",
    "result_all2=[Ex_rolling(obnum+1) for obnum in range(10)]\n",
    "Result_all2=pd.concat(result_all2)\n",
    "Result_all2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Size</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ ring</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>0.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Size         Speed            Type  Response\n",
       "0   3 deg   0.6 deg/sec       Circ ring      0.18\n",
       "1   3 deg   0.6 deg/sec      Circ w gap      0.01\n",
       "2   3 deg   0.6 deg/sec    Circ w paint      0.01\n",
       "3   3 deg   0.6 deg/sec     Circ wobble      0.15\n",
       "4   3 deg   0.6 deg/sec    Long ellipse      0.07\n",
       "5   3 deg   0.6 deg/sec     Oct on edge      0.00\n",
       "6   3 deg   0.6 deg/sec   Oct on vertex      0.05\n",
       "7   3 deg   0.6 deg/sec    Rect on edge      0.03\n",
       "8   3 deg   0.6 deg/sec  Rect on vertex      0.00\n",
       "9   3 deg   0.6 deg/sec    Wide ellipse      0.12\n",
       "10  3 deg   6.0 deg/sec       Circ ring      0.57\n",
       "11  3 deg   6.0 deg/sec      Circ w gap      0.00\n",
       "12  3 deg   6.0 deg/sec    Circ w paint      0.05\n",
       "13  3 deg   6.0 deg/sec     Circ wobble      0.61\n",
       "14  3 deg   6.0 deg/sec    Long ellipse      0.13\n",
       "15  3 deg   6.0 deg/sec     Oct on edge      0.00\n",
       "16  3 deg   6.0 deg/sec   Oct on vertex      0.04\n",
       "17  3 deg   6.0 deg/sec    Rect on edge      0.02\n",
       "18  3 deg   6.0 deg/sec  Rect on vertex      0.01\n",
       "19  3 deg   6.0 deg/sec    Wide ellipse      0.41\n",
       "20  3 deg  60.0 deg/sec       Circ ring      0.96\n",
       "21  3 deg  60.0 deg/sec      Circ w gap      0.83\n",
       "22  3 deg  60.0 deg/sec    Circ w paint      0.87\n",
       "23  3 deg  60.0 deg/sec     Circ wobble      0.93\n",
       "24  3 deg  60.0 deg/sec    Long ellipse      0.54\n",
       "25  3 deg  60.0 deg/sec     Oct on edge      0.35\n",
       "26  3 deg  60.0 deg/sec   Oct on vertex      0.56\n",
       "27  3 deg  60.0 deg/sec    Rect on edge      0.02\n",
       "28  3 deg  60.0 deg/sec  Rect on vertex      0.01\n",
       "29  3 deg  60.0 deg/sec    Wide ellipse      0.79\n",
       "30  6 deg   0.6 deg/sec       Circ ring      0.27\n",
       "31  6 deg   0.6 deg/sec      Circ w gap      0.02\n",
       "32  6 deg   0.6 deg/sec    Circ w paint      0.00\n",
       "33  6 deg   0.6 deg/sec     Circ wobble      0.24\n",
       "34  6 deg   0.6 deg/sec    Long ellipse      0.04\n",
       "35  6 deg   0.6 deg/sec     Oct on edge      0.00\n",
       "36  6 deg   0.6 deg/sec   Oct on vertex      0.04\n",
       "37  6 deg   0.6 deg/sec    Rect on edge      0.04\n",
       "38  6 deg   0.6 deg/sec  Rect on vertex      0.00\n",
       "39  6 deg   0.6 deg/sec    Wide ellipse      0.10\n",
       "40  6 deg   6.0 deg/sec       Circ ring      0.49\n",
       "41  6 deg   6.0 deg/sec      Circ w gap      0.02\n",
       "42  6 deg   6.0 deg/sec    Circ w paint      0.02\n",
       "43  6 deg   6.0 deg/sec     Circ wobble      0.54\n",
       "44  6 deg   6.0 deg/sec    Long ellipse      0.08\n",
       "45  6 deg   6.0 deg/sec     Oct on edge      0.02\n",
       "46  6 deg   6.0 deg/sec   Oct on vertex      0.06\n",
       "47  6 deg   6.0 deg/sec    Rect on edge      0.04\n",
       "48  6 deg   6.0 deg/sec  Rect on vertex      0.00\n",
       "49  6 deg   6.0 deg/sec    Wide ellipse      0.43\n",
       "50  6 deg  60.0 deg/sec       Circ ring      0.90\n",
       "51  6 deg  60.0 deg/sec      Circ w gap      0.41\n",
       "52  6 deg  60.0 deg/sec    Circ w paint      0.57\n",
       "53  6 deg  60.0 deg/sec     Circ wobble      0.86\n",
       "54  6 deg  60.0 deg/sec    Long ellipse      0.38\n",
       "55  6 deg  60.0 deg/sec     Oct on edge      0.11\n",
       "56  6 deg  60.0 deg/sec   Oct on vertex      0.23\n",
       "57  6 deg  60.0 deg/sec    Rect on edge      0.03\n",
       "58  6 deg  60.0 deg/sec  Rect on vertex      0.00\n",
       "59  6 deg  60.0 deg/sec    Wide ellipse      0.83"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now I would like to compute the probability that people see \n",
    "# the cetrain stimuli as non-rigid by aggregating by its size, speed, and type the dataframe\n",
    "Agg_result=Result_all.groupby(['Size','Speed','Type'])['Response'].mean().reset_index()\n",
    "Agg_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fdf84c669a0>"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot that \n",
    "sns_plot=sns.catplot(data=Result_all,x='Type',y= 'Response',row='Size',col='Speed',kind='bar',\n",
    "                     row_order=['3 deg','6 deg'],col_order=['0.6 deg/sec','6.0 deg/sec','60.0 deg/sec'],\n",
    "                     order=['Circ ring','Circ w gap','Circ w paint','Oct on edge','Oct on vertex',\n",
    "                            'Rect on vertex','Rect on edge','Long ellipse','Wide ellipse',\n",
    "                            'Circ wobble'],palette=sns.color_palette(['blue', 'blue','blue'\n",
    "                                                                      ,'blue','blue','blue','blue','blue',\n",
    "                                                                      'blue','black']))\n",
    "sns_plot.set_xticklabels(rotation=65, horizontalalignment='right')\n",
    "sns_plot.set(xlabel=None)\n",
    "sns_plot.set(ylabel='Proportion of non-rigid percepts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Size</th>\n",
       "      <th>3 deg</th>\n",
       "      <th>6 deg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type</th>\n",
       "      <th>Speed</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Circ ring</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.18</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.57</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.96</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Circ w gap</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.83</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Circ w paint</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.87</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Circ wobble</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.15</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.61</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.93</td>\n",
       "      <td>0.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Long ellipse</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.07</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.13</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.54</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Oct on edge</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.35</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Oct on vertex</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.04</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.56</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Rect on edge</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.02</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Rect on vertex</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Wide ellipse</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <td>0.12</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <td>0.41</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60.0 deg/sec</th>\n",
       "      <td>0.79</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Size                         3 deg  6 deg\n",
       "Type           Speed                     \n",
       "Circ ring      0.6 deg/sec    0.18   0.27\n",
       "               6.0 deg/sec    0.57   0.49\n",
       "               60.0 deg/sec   0.96   0.90\n",
       "Circ w gap     0.6 deg/sec    0.01   0.02\n",
       "               6.0 deg/sec    0.00   0.02\n",
       "               60.0 deg/sec   0.83   0.41\n",
       "Circ w paint   0.6 deg/sec    0.01   0.00\n",
       "               6.0 deg/sec    0.05   0.02\n",
       "               60.0 deg/sec   0.87   0.57\n",
       "Circ wobble    0.6 deg/sec    0.15   0.24\n",
       "               6.0 deg/sec    0.61   0.54\n",
       "               60.0 deg/sec   0.93   0.86\n",
       "Long ellipse   0.6 deg/sec    0.07   0.04\n",
       "               6.0 deg/sec    0.13   0.08\n",
       "               60.0 deg/sec   0.54   0.38\n",
       "Oct on edge    0.6 deg/sec    0.00   0.00\n",
       "               6.0 deg/sec    0.00   0.02\n",
       "               60.0 deg/sec   0.35   0.11\n",
       "Oct on vertex  0.6 deg/sec    0.05   0.04\n",
       "               6.0 deg/sec    0.04   0.06\n",
       "               60.0 deg/sec   0.56   0.23\n",
       "Rect on edge   0.6 deg/sec    0.03   0.04\n",
       "               6.0 deg/sec    0.02   0.04\n",
       "               60.0 deg/sec   0.02   0.03\n",
       "Rect on vertex 0.6 deg/sec    0.00   0.00\n",
       "               6.0 deg/sec    0.01   0.00\n",
       "               60.0 deg/sec   0.01   0.00\n",
       "Wide ellipse   0.6 deg/sec    0.12   0.10\n",
       "               6.0 deg/sec    0.41   0.43\n",
       "               60.0 deg/sec   0.79   0.83"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I can use pivot the aggregated data to reshape in a way that it is easy \n",
    "# to compare the effect of speed/size\n",
    "# pivot it by size\n",
    "Agg_result.pivot_table(index=['Type','Speed'],columns=['Size'],values='Response')\n",
    "# It seems like there is not much difference between two sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fdf84952670>"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 424.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize it \n",
    "sns_plot=sns.catplot(data=Result_all,x='Type',y= 'Response',hue='Size',kind='bar',\n",
    "                     order=['Circ ring','Circ w gap','Circ w paint','Oct on edge','Oct on vertex',\n",
    "                            'Rect on vertex','Rect on edge','Long ellipse','Wide ellipse',\n",
    "                            'Circ wobble'])\n",
    "sns_plot.set_xticklabels(rotation=65, horizontalalignment='right')\n",
    "sns_plot.set(xlabel=None)\n",
    "sns_plot.set(ylabel='Proportion of non-rigid percepts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Speed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Size</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <th>60.0 deg/sec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Speed            Type   Size  0.6 deg/sec  6.0 deg/sec  60.0 deg/sec\n",
       "0           Circ ring  3 deg         0.18         0.57          0.96\n",
       "1           Circ ring  6 deg         0.27         0.49          0.90\n",
       "2          Circ w gap  3 deg         0.01         0.00          0.83\n",
       "3          Circ w gap  6 deg         0.02         0.02          0.41\n",
       "4        Circ w paint  3 deg         0.01         0.05          0.87\n",
       "5        Circ w paint  6 deg         0.00         0.02          0.57\n",
       "6         Circ wobble  3 deg         0.15         0.61          0.93\n",
       "7         Circ wobble  6 deg         0.24         0.54          0.86\n",
       "8        Long ellipse  3 deg         0.07         0.13          0.54\n",
       "9        Long ellipse  6 deg         0.04         0.08          0.38\n",
       "10        Oct on edge  3 deg         0.00         0.00          0.35\n",
       "11        Oct on edge  6 deg         0.00         0.02          0.11\n",
       "12      Oct on vertex  3 deg         0.05         0.04          0.56\n",
       "13      Oct on vertex  6 deg         0.04         0.06          0.23\n",
       "14       Rect on edge  3 deg         0.03         0.02          0.02\n",
       "15       Rect on edge  6 deg         0.04         0.04          0.03\n",
       "16     Rect on vertex  3 deg         0.00         0.01          0.01\n",
       "17     Rect on vertex  6 deg         0.00         0.00          0.00\n",
       "18       Wide ellipse  3 deg         0.12         0.41          0.79\n",
       "19       Wide ellipse  6 deg         0.10         0.43          0.83"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the effect of speed\n",
    "Agg_result.pivot_table(index=['Type','Size'],columns=['Speed'],values='Response').reset_index()\n",
    "# Regardless of the shape (except for rectangle) and the size, there are huge jump from\n",
    "# low speed to high speed\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fdf862a6370>"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 460.625x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns_plot=sns.catplot(data=Result_all,x='Type',y= 'Response',hue='Speed',kind='bar',\n",
    "                     order=['Circ ring','Circ w gap','Circ w paint','Oct on edge','Oct on vertex',\n",
    "                            'Rect on vertex','Rect on edge','Long ellipse','Wide ellipse',\n",
    "                            'Circ wobble'],hue_order=['0.6 deg/sec','6.0 deg/sec','60.0 deg/sec'])\n",
    "sns_plot.set_xticklabels(rotation=65, horizontalalignment='right')\n",
    "sns_plot.set(xlabel=None)\n",
    "sns_plot.set(ylabel='Proportion of non-rigid percepts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Speed</th>\n",
       "      <th>Type</th>\n",
       "      <th>Size</th>\n",
       "      <th>0.6 deg/sec</th>\n",
       "      <th>6.0 deg/sec</th>\n",
       "      <th>60.0 deg/sec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Speed            Type   Size  0.6 deg/sec  6.0 deg/sec  60.0 deg/sec\n",
       "0           Circ ring  3 deg         0.18         0.57          0.96\n",
       "1           Circ ring  6 deg         0.27         0.49          0.90\n",
       "2          Circ w gap  3 deg         0.01         0.00          0.83\n",
       "3          Circ w gap  6 deg         0.02         0.02          0.41\n",
       "4        Circ w paint  3 deg         0.01         0.05          0.87\n",
       "5        Circ w paint  6 deg         0.00         0.02          0.57\n",
       "6         Circ wobble  3 deg         0.15         0.61          0.93\n",
       "7         Circ wobble  6 deg         0.24         0.54          0.86\n",
       "8        Long ellipse  3 deg         0.07         0.13          0.54\n",
       "9        Long ellipse  6 deg         0.04         0.08          0.38\n",
       "10        Oct on edge  3 deg         0.00         0.00          0.35\n",
       "11        Oct on edge  6 deg         0.00         0.02          0.11\n",
       "12      Oct on vertex  3 deg         0.05         0.04          0.56\n",
       "13      Oct on vertex  6 deg         0.04         0.06          0.23\n",
       "14       Rect on edge  3 deg         0.03         0.02          0.02\n",
       "15       Rect on edge  6 deg         0.04         0.04          0.03\n",
       "16     Rect on vertex  3 deg         0.00         0.01          0.01\n",
       "17     Rect on vertex  6 deg         0.00         0.00          0.00\n",
       "18       Wide ellipse  3 deg         0.12         0.41          0.79\n",
       "19       Wide ellipse  6 deg         0.10         0.43          0.83"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make a wide data to practice \"melt\"\n",
    "wide_data=Agg_result.pivot_table(index=['Type','Size'],columns=['Speed'],values='Response').reset_index()\n",
    "wide_data\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Size</th>\n",
       "      <th>Airport</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>0.6 deg/sec</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>6.0 deg/sec</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Circ ring</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Circ w gap</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Circ w paint</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Circ wobble</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Long ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Oct on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Oct on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Rect on edge</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Rect on vertex</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>3 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Wide ellipse</td>\n",
       "      <td>6 deg</td>\n",
       "      <td>60.0 deg/sec</td>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Type   Size       Airport  Total\n",
       "0        Circ ring  3 deg   0.6 deg/sec   0.18\n",
       "1        Circ ring  6 deg   0.6 deg/sec   0.27\n",
       "2       Circ w gap  3 deg   0.6 deg/sec   0.01\n",
       "3       Circ w gap  6 deg   0.6 deg/sec   0.02\n",
       "4     Circ w paint  3 deg   0.6 deg/sec   0.01\n",
       "5     Circ w paint  6 deg   0.6 deg/sec   0.00\n",
       "6      Circ wobble  3 deg   0.6 deg/sec   0.15\n",
       "7      Circ wobble  6 deg   0.6 deg/sec   0.24\n",
       "8     Long ellipse  3 deg   0.6 deg/sec   0.07\n",
       "9     Long ellipse  6 deg   0.6 deg/sec   0.04\n",
       "10     Oct on edge  3 deg   0.6 deg/sec   0.00\n",
       "11     Oct on edge  6 deg   0.6 deg/sec   0.00\n",
       "12   Oct on vertex  3 deg   0.6 deg/sec   0.05\n",
       "13   Oct on vertex  6 deg   0.6 deg/sec   0.04\n",
       "14    Rect on edge  3 deg   0.6 deg/sec   0.03\n",
       "15    Rect on edge  6 deg   0.6 deg/sec   0.04\n",
       "16  Rect on vertex  3 deg   0.6 deg/sec   0.00\n",
       "17  Rect on vertex  6 deg   0.6 deg/sec   0.00\n",
       "18    Wide ellipse  3 deg   0.6 deg/sec   0.12\n",
       "19    Wide ellipse  6 deg   0.6 deg/sec   0.10\n",
       "20       Circ ring  3 deg   6.0 deg/sec   0.57\n",
       "21       Circ ring  6 deg   6.0 deg/sec   0.49\n",
       "22      Circ w gap  3 deg   6.0 deg/sec   0.00\n",
       "23      Circ w gap  6 deg   6.0 deg/sec   0.02\n",
       "24    Circ w paint  3 deg   6.0 deg/sec   0.05\n",
       "25    Circ w paint  6 deg   6.0 deg/sec   0.02\n",
       "26     Circ wobble  3 deg   6.0 deg/sec   0.61\n",
       "27     Circ wobble  6 deg   6.0 deg/sec   0.54\n",
       "28    Long ellipse  3 deg   6.0 deg/sec   0.13\n",
       "29    Long ellipse  6 deg   6.0 deg/sec   0.08\n",
       "30     Oct on edge  3 deg   6.0 deg/sec   0.00\n",
       "31     Oct on edge  6 deg   6.0 deg/sec   0.02\n",
       "32   Oct on vertex  3 deg   6.0 deg/sec   0.04\n",
       "33   Oct on vertex  6 deg   6.0 deg/sec   0.06\n",
       "34    Rect on edge  3 deg   6.0 deg/sec   0.02\n",
       "35    Rect on edge  6 deg   6.0 deg/sec   0.04\n",
       "36  Rect on vertex  3 deg   6.0 deg/sec   0.01\n",
       "37  Rect on vertex  6 deg   6.0 deg/sec   0.00\n",
       "38    Wide ellipse  3 deg   6.0 deg/sec   0.41\n",
       "39    Wide ellipse  6 deg   6.0 deg/sec   0.43\n",
       "40       Circ ring  3 deg  60.0 deg/sec   0.96\n",
       "41       Circ ring  6 deg  60.0 deg/sec   0.90\n",
       "42      Circ w gap  3 deg  60.0 deg/sec   0.83\n",
       "43      Circ w gap  6 deg  60.0 deg/sec   0.41\n",
       "44    Circ w paint  3 deg  60.0 deg/sec   0.87\n",
       "45    Circ w paint  6 deg  60.0 deg/sec   0.57\n",
       "46     Circ wobble  3 deg  60.0 deg/sec   0.93\n",
       "47     Circ wobble  6 deg  60.0 deg/sec   0.86\n",
       "48    Long ellipse  3 deg  60.0 deg/sec   0.54\n",
       "49    Long ellipse  6 deg  60.0 deg/sec   0.38\n",
       "50     Oct on edge  3 deg  60.0 deg/sec   0.35\n",
       "51     Oct on edge  6 deg  60.0 deg/sec   0.11\n",
       "52   Oct on vertex  3 deg  60.0 deg/sec   0.56\n",
       "53   Oct on vertex  6 deg  60.0 deg/sec   0.23\n",
       "54    Rect on edge  3 deg  60.0 deg/sec   0.02\n",
       "55    Rect on edge  6 deg  60.0 deg/sec   0.03\n",
       "56  Rect on vertex  3 deg  60.0 deg/sec   0.01\n",
       "57  Rect on vertex  6 deg  60.0 deg/sec   0.00\n",
       "58    Wide ellipse  3 deg  60.0 deg/sec   0.79\n",
       "59    Wide ellipse  6 deg  60.0 deg/sec   0.83"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.melt(wide_data,id_vars=['Type','Size'],value_vars = ['0.6 deg/sec', '6.0 deg/sec', '60.0 deg/sec'], \n",
    "                       var_name = 'Speed', \n",
    "                       value_name='Total')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
